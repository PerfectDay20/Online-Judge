// java, fast but ugly

class Solution {
    public int maximumProduct(int[] nums) {
        int max1, max2, max3;
        max1 = max2 = max3 = Integer.MIN_VALUE;
        int min1, min2;
        min1 = min2 = Integer.MAX_VALUE;
        for (int n : nums) {
            if (n <= max3) {
            } else if (n <= max2) {
                max3 = n;
            } else if (n <= max1) {
                max3 = max2;
                max2 = n;
            } else {
                max3 = max2;
                max2 = max1;
                max1 = n;
            }

            if (n >= min2) {

            } else if (n >= min1) {
                min2 = n;
            } else {
                min2 = min1;
                min1 = n;
            }
        }
        return Math.max(max1 * max2 * max3, min1 * min2 * max1);
    }
}

// scala
object Solution {
  def maximumProduct(nums: Array[Int]): Int = {
    val sorted = nums.sorted
    Math.max(sorted.takeRight(3).product,sorted(0)*sorted(1)* sorted.last)
  }
}

// python
class Solution:
    def maximumProduct(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        nums = sorted(nums)
        return max(nums[0] * nums[1] * nums[-1], nums[-1] * nums[-2] * nums[-3])
       
