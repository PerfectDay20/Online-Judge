// Java
import java.util.HashMap;
import java.util.Map;

class Solution {
    public int findLHS(int[] nums) {
        Map<Integer, Integer> count = new HashMap<>();
        for (int n : nums) {
            count.put(n, count.getOrDefault(n, 0) + 1);
        }
        int max = 0;
        for (Map.Entry<Integer, Integer> entry : count.entrySet()) {
            if (count.containsKey(entry.getKey() + 1)) {
                max = Math.max(max, entry.getValue() + count.get(entry.getKey() + 1));
            }
        }
        return max;
    }
}

// Scala
object Solution {
    def findLHS(nums: Array[Int]): Int = {
      val count = nums.foldLeft(Map[Int, Int]())((m, n) => m + (n -> (m.getOrElse(n, 0) + 1)))
      var max = 0
      for (k <- count) {
        if (count.contains(k._1 + 1)) {
          max = Math.max(k._2 + count(k._1 + 1), max)
        }
      }
      max
    }
  }

// Python
from collections import Counter

class Solution:
    def findLHS(self, nums):
        """
        :type nums: List[int]
        :rtype: int
        """
        c = Counter(nums)
        result = 0
        for k, v in c.items():
            if k + 1 in c:
                result = max(result, v + c[k + 1])
        return result
