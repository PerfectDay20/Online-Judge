// Java
class Solution {
    public int compress(char[] chars) {
        int n = chars.length;
        int i = 0;
        char cur = chars[0];
        int counter = 1;

        for (int j = 1; j < n; j++) {
            if (chars[j] == cur) {
                counter++;
            } else {
                chars[i++] = cur;
                cur = chars[j];
                i = putInt(chars, i, counter);
                counter = 1;
            }
        }
        chars[i++] = cur;
        i = putInt(chars, i, counter);
        return i;
    }

    private int putInt(char[] chars, int i, int counter) {
        if (counter != 1) {
            char[] cs = String.valueOf(counter).toCharArray();
            for (char c : cs) {
                chars[i++] = c;
            }
        }
        return i;
    }
}

// Scala
object Solution {
    def compress(chars: Array[Char]): Int = {
      var write = 0
      var anchor = 0
      for ((c, read) <- chars.zipWithIndex) {
        if (read + 1 == chars.length || chars(read + 1) != c) {
          chars(write) = c
          write += 1
          if (read - anchor > 0) {
            for (digit <- String.valueOf(read - anchor + 1)) {
              chars(write) = digit
              write += 1
            }
          }
          anchor = read + 1
        }
      }
      write
    }
  }

// Python
class Solution:
    def compress(self, chars):
        """
        :type chars: List[str]
        :rtype: int
        """
        write, anchor, length = 0, 0, len(chars)
        for read, c in enumerate(chars):
            if read + 1 == length or chars[read + 1] != c:
                chars[write] = c
                write += 1
                if read - anchor > 0:
                    for digit in str(read - anchor + 1):
                        chars[write] = digit
                        write += 1
                anchor = read + 1
        return write
