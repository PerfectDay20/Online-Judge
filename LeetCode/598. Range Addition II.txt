// Java
class Solution {
    public int maxCount(int m, int n, int[][] ops) {
        int minM = m;
        int minN = n;
        for (int[] op : ops) {
            minM = Math.min(minM, op[0]);
            minN = Math.min(minN, op[1]);
        }
        return minM * minN;
    }
}

// Scala
object Solution {
    def maxCount(m: Int, n: Int, ops: Array[Array[Int]]): Int = {
      val min = ops.foldLeft((m,n))((old, array)=> (Math.min(old._1,array(0)), Math.min(old._2,array(1))))
      min._1 * min._2
    }
  }

// Python
class Solution:
    def maxCount(self, m, n, ops):
        """
        :type m: int
        :type n: int
        :type ops: List[List[int]]
        :rtype: int
        """
        minM, minN = m, n
        for op in ops:
            minM = min(minM, op[0])
            minN = min(minN, op[1])
        return minM * minN
