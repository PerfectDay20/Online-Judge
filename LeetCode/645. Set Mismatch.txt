// java
class Solution {
    public int[] findErrorNums(int[] nums) {
        int n = nums.length;
        int xor = 0;
        int sum = 0;
        for (int i = 0; i < n; i++) {
            xor = xor ^ (i + 1) ^ nums[i];
            sum += nums[i];
        }

        int rightMost = xor & (~xor + 1);

        int group1 = 0;
        int group2 = 0;
        for (int i = 0; i < n; i++) {
            if ((nums[i] & rightMost) == rightMost) {
                group1 ^= nums[i];
            } else {
                group2 ^= nums[i];
            }

            if (((i+1) & rightMost) == rightMost) {
                group1 ^= i+1;
            } else {
                group2 ^= i+1;
            }
        }

        if (sum > n * (n + 1) / 2) {
            return new int[] {Math.max(group1, group2), Math.min(group1, group2)};
        } else {
            return new int[] {Math.min(group1, group2), Math.max(group1, group2)};
        }
    }
}

// scala
object Solution {
  def findErrorNums(nums: Array[Int]): Array[Int] = {
    val n = nums.length
    val loss = ((1 to n).toSet -- nums.toSet).head
    val dup = nums.sum + loss - n * (n + 1) / 2
    Array(dup, loss)
  }
}

// python
class Solution:
    def findErrorNums(self, nums):
        """
        :type nums: List[int]
        :rtype: List[int]
        """
        n = len(nums)
        loss = (set(range(1, n + 1)) - set(nums)).pop()
        dup = int(sum(nums) + loss - n*(n+1)/2)
        return [dup, loss]

